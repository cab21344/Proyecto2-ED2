
// Electrónica Digital 2 - Proyecto 2
// María Daniela Cabrera Porras, 21344

// Librerías ******************************************************
#include "driverlib/gpio.h"   // Incluye la biblioteca GPIO.
#include <SPI.h>
#include <SD.h>

//*****************************************************************

// Definiciones ***************************************************
#define botonMedir PF_4
#define botonGuardar PF_0
#define buzzerPin PF_2

#define SCK PA_2  // Pin SCK de la Tiva (PA2)
#define MISO PA_4 // Pin MISO de la Tiva (PA4)
#define MOSI PA_5 // Pin MOSI de la Tiva (PA5)
#define SS PA_3   // Pin SS de la Tiva (PA3)
//*****************************************************************

// Variables ******************************************************
int estadoMed = 0;
int estadoGuar = 0;

const int chipSelect = SS;
//*****************************************************************


//***************************************************************
//Void Setup
//***************************************************************
void setup() {
  // initialize both serial ports ***********************
  Serial.begin(115200);
  Serial2.begin(115200);
  SPI.setModule(0);


  //se inicia SD ***********************
  /*Serial.println("Iniciando tarjeta SD");
  pinMode(chipSelect, OUTPUT);

  if (!SD.begin(chipSelect)) { //pin de la SD
    Serial.println("Inicialización fallida de SD");
    while (true) {} //si falla que se quede en bucle
  }
  Serial.println("Tarjeta SD inicializada"); //mensaje de SD inicializada
*/

  //Indica que se inició comunicación serial ***********************
  Serial.println("Inicio de comunicación serial"); //confimación comunicación serial

  //Inputs y Outputs ***********************
  pinMode(botonMedir, INPUT_PULLUP);
  pinMode(botonGuardar, INPUT_PULLUP);
  pinMode(buzzerPin, OUTPUT);

  noTone(buzzerPin); //que inicie sin sonido

}

//***************************************************************


//Void Loops
//***************************************************************
void loop() {
  int inByte = 0; //variable para almacenar datos de puerto serial
  
  //Estados botones
  estadoMed = digitalRead(botonMedir);
  estadoGuar = digitalRead(botonGuardar);

  //Boton 1 - Pide info al ESP32 **************************************************
  if (estadoMed == LOW) {
    Serial.println("Medición:");
    Serial2.println("measure"); //manda mensaje al puerto serial2 (ESP32)
    tone(buzzerPin, 500, 500); //tono de medición
    delay(500);
  }

  if (Serial2.available()) { //lectura del puerto serial2 (ESP32)
    int inByte = Serial2.read(); //guarda info
    Serial.write(inByte); //imprime info en serial monitor
  }

  if (Serial.available()) {
    int inByte = Serial.read(); //guarda info en inByte
  }

  //Boton 2 - Guardar info en la SD **************************************************
  if(Serial.available()){
    inByte = Serial.read(); //guarda info en inByte
  }
  
  if (estadoGuar == LOW) {
    File dataFile = SD.open("datalog.txt", FILE_WRITE); //archivo para SD

    if (dataFile) {
      String dataString = String(inByte); //de byte a string
      dataFile.print(dataString); //guarda dato tarjeta SD
      dataFile.close();
      Serial.println("Información almacenada en la SD!");
      tone(buzzerPin, 1000, 500); //tono que indica almaceno la info
      delay(500);
    } else {
      Serial.println("Error al almacenar información");
      tone(buzzerPin, 200, 500); //tono que indica error
      delay(500);
    }
  }

  delay(100);
  noTone(buzzerPin); //sin tono
}
